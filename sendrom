#!/usr/bin/env python3

import os
import select
import serial
import struct
import sys
import termios
import time

class Replica1Terminal:
    def __init__(self, port):
        self.port = port
        self.keyboard_fd = sys.stdin.fileno()
        self.serial_fd = self.port.fileno()
        self.terminal_defaults = termios.tcgetattr(self.keyboard_fd)

    def getkeypress(self):
        return os.read(self.keyboard_fd, 1).decode('latin-1')

    def getserialbyte(self):
        return self.port.read(1).decode('latin-1')

    def terminal_unbuffered(self):
        # put stdin into single-character mode
        new = termios.tcgetattr(self.keyboard_fd)
        new[3] = new[3] & ~termios.ICANON & ~termios.ECHO
        new[6][termios.VMIN] = 1
        new[6][termios.VTIME] = 0
        termios.tcsetattr(self.keyboard_fd, termios.TCSANOW, new)

    def terminal_restore(self):
        termios.tcsetattr(self.keyboard_fd, termios.TCSAFLUSH, self.terminal_defaults)

    def run(self):
        self.terminal_unbuffered()
        try:
            while True:
                iw, ow, ew = select.select([self.serial_fd, self.keyboard_fd], [], [], None)
                if self.keyboard_fd in iw:
                    keypress = self.getkeypress()
                    self.process_keypress(keypress)
                if self.serial_fd in iw:
                    inbyte = self.getserialbyte()
                    self.process_terminal(inbyte)
        finally:
            self.terminal_restore()

    def process_keypress(self, key):
        self.port.write(key.encode('latin-1'))

    def process_terminal(self, byte):
        sys.stdout.write(byte)
        sys.stdout.flush()

################################################################

rom = open(sys.argv[2], 'rb').read()
print(f"ROM length {len(rom)} bytes")

if len(rom) >= (96*1024)-1:
    print("ROM too large! Aborted.")
    sys.exit(1)

port = serial.Serial(sys.argv[1], 9600)
start = time.time()

# WRS: observed that the final byte sent is NOT loaded correctly by the SOFTROM
# utility on the Q40. We work around the defect here by adding 1 to the ROM
# length.  Note that we do not actually send an extra byte, but this fixes the
# issue observed.

# send length+1 as little-endian 32-bit word
port.write(struct.pack('>I', 1+len(rom))) 

# send entire ROM contents
sent = 0
while len(rom):
    chunk = rom[:512]
    rom = rom[512:]
    port.write(chunk)
    sent += len(chunk)
    print(f'sent {sent}, remaining {len(rom)}')
port.flush()

# report progress
taken = time.time() - start
print('all sent in %.3f seconds.' % taken)
print('---- entering terminal mode ----')

t = Replica1Terminal(port)
t.run()
